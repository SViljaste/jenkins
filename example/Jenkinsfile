#!groovy

/* Jenkins documentation: https://www.jenkins.io/doc/book/pipeline/ */
pipeline {
/* Selle kommentaari j√§rgi lisame rea Jenkins agendi v√§lja kutsumiseks atribuudi abil (label). Adribuudi m√§√§rasime agendi konfiguratsiooni sammus. */
/* PLACEHOLDER FOR AGENT DECLARATION BY LABEL */
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '5', daysToKeepStr: '5'))
    disableConcurrentBuilds()
    preserveStashes(buildCount: 5)
  }
  stages {
    stage('Setup Parameters üè∑Ô∏è') {
      steps {
/* Selle kommentaari j√§rgi lisame read muutujate ja parameetrite m√§√§ramiseks script{} sektsioonis . Vajame kahte parameetrit: APPLICATION_NAME = 'www' ja DESTINATION_HOST = '<eth0 v√µrguadapteri IP aadress>' */
/* PLACEHOLDER FOR DECLARING PIPELINE PARAMETERS INSIDE script{} */
      }
    }
    stage('Source Code Checkout üßæ') {
      steps {
        script {
/* Selle kommentaari j√§rel on deklareeritud SSH agent, mis v√µtab sisendiks SSH v√µtme credential ID (tegime seda pipeline boilerplate loomise faasis). ID leiame kui liigume Jenkins UI's: http://localhost:8081/manage/credentials/ */
          sshagent(['<LISA SIIA credentialsId>']) {
            def scmVars = checkout(scm: scm, poll: false)
            env.GIT_COMMIT = scmVars.GIT_COMMIT
          }
          println "${env.GIT_COMMIT}"
        }
      }
    }
/* Selle kommentaari j√§rgi lisame www rakenduse ehitamiseks vajalikud sh k√§sud stage('Deploy www üöÄ') {} sektsioonis.
1. sh k√§sk: loome sihtkohta kataloogi asukoha ja nimega: /opt/${env.APPLICATION_NAME}, tehes seda √ºle SSH √ºhenduse, n√§ide: ssh jenkins-slave@@${DESTINATION_HOST} '<kataloogi loomise k√§sk>'
2. sh k√§sk: kopeerime kogu kataloogi Nginx_Linux_Docker_www sisu √ºle SSH √ºhenduse asukohta /opt/${env.APPLICATION_NAME}. Vihje: Linuxi programm scp on siin abiks.
3. sh k√§sk: k√§ivitame √ºle SSH √ºhenduse docker-compose programmi abil www rakenduse nagu tegime seda www rakenduse projekti loomise faasis.
*/
/* PLACEHOLDER FOR DECLARING DEPLOYMENT STAGE INSIDE stage() {} */
  }
  post {
    always {
      cleanWs()
    }
    failure {
      println "Build Failed"
    }
    success {
      println "Build Successful"
    }
  }
}

